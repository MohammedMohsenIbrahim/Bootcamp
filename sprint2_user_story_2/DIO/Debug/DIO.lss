
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed8  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000957  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c99  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000819  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000856  00000000  00000000  00003a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_10>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 02 	call	0x492	; 0x492 <main>
  8a:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
/********************************************* External Functions *************************************/
extern void Traffic_light_delay_ISR(); 

/***************************************** Interrupt service rotuine *********************************/
/* TIMER0 OVF interrupt service routine */
ISR(TIMER0_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
		 
}
  a6:	00 00       	nop
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	0f 90       	pop	r0
  ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <Tasks_init>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void Tasks_init(){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinDirection(LED1_PIN_NUM,OUTPUT);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LED2_PIN_NUM,OUTPUT);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LED3_PIN_NUM,OUTPUT);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPinDirection>
	 TIMER0_OCR_init(TICKS_FOR_1MS);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TIMER0_OCR_init>
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Task_BLINK_LED1>:
Function Parameters  : N/A 

Function Return      : N/A

*******************************************************************************/
volatile void Task_BLINK_LED1(){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	if(Call_Back_Flag == TRUE){
  f0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Call_Back_Flag>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	51 f4       	brne	.+20     	; 0x10c <Task_BLINK_LED1+0x24>
		Toggle_Bit(LED1_PORT,5);
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	28 e3       	ldi	r18, 0x38	; 56
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	30 81       	ld	r19, Z
 104:	20 e2       	ldi	r18, 0x20	; 32
 106:	23 27       	eor	r18, r19
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	}
}
 10c:	00 00       	nop
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <Task_BLINK_LED2>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
volatile void volatile Task_BLINK_LED2(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	if(Call_Back_Flag == TRUE){	
 11c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Call_Back_Flag>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	51 f4       	brne	.+20     	; 0x138 <Task_BLINK_LED2+0x24>
		Toggle_Bit(LED2_PORT,6);
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e3       	ldi	r18, 0x38	; 56
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	30 81       	ld	r19, Z
 130:	20 e4       	ldi	r18, 0x40	; 64
 132:	23 27       	eor	r18, r19
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	}
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Task_BLINK_LED3>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
volatile void Task_BLINK_LED3(){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
  if(Call_Back_Flag == TRUE){	
 148:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Call_Back_Flag>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <Task_BLINK_LED3+0x24>
	Toggle_Bit(LED3_PORT,7);
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	28 e3       	ldi	r18, 0x38	; 56
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	30 81       	ld	r19, Z
 15c:	20 e8       	ldi	r18, 0x80	; 128
 15e:	23 27       	eor	r18, r19
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
  }
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <Schedular_init>:
					   task_priodicity : no of second of each task to run
						
Function Return      : N/A

*******************************************************************************/
void Schedular_init(void (*Added_Fun_Name)(void),uint8 fun_priority,uint16 task_periodicity){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <Schedular_init+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <Schedular_init+0x8>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	6b 83       	std	Y+3, r22	; 0x03
 180:	5d 83       	std	Y+5, r21	; 0x05
 182:	4c 83       	std	Y+4, r20	; 0x04
	Task_struct[fun_priority].Ready_Tasks_PTR = Added_Fun_Name ; /* Add the function name of the task will run to the struct */
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	8b 59       	subi	r24, 0x9B	; 155
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	3a 81       	ldd	r19, Y+2	; 0x02
 19a:	fc 01       	movw	r30, r24
 19c:	31 83       	std	Z+1, r19	; 0x01
 19e:	20 83       	st	Z, r18
	Task_struct[fun_priority].se_u8_task_priodicity = task_periodicity ; /* receive task periodicity frok user */
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2c 81       	ldd	r18, Y+4	; 0x04
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	89 59       	subi	r24, 0x99	; 153
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
	Task_struct[fun_priority].se_u8_rem_ticks_to_execute_task = task_periodicity ; /* init periodicity with tick */
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2c 81       	ldd	r18, Y+4	; 0x04
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 59       	subi	r24, 0x98	; 152
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
}
 1d0:	00 00       	nop
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <schedulerStart>:
					   task_priodicity : no of second of each task to run
						
Function Return      : N/A

*******************************************************************************/
void schedulerStart(){
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8_task_counter = 0 ;  /* Define counter to count the task ready to run */
	uint8 Local_u8_task_rem_time_counter ; /* Declare counter to loop on tasks to reduce the remaining time */
	for(Local_u8_task_rem_time_counter = 0 ;Local_u8_task_rem_time_counter < TTC_MAX_TASKS_NUM;Local_u8_task_rem_time_counter++){
 1ec:	19 82       	std	Y+1, r1	; 0x01
 1ee:	18 c0       	rjmp	.+48     	; 0x220 <schedulerStart+0x3e>
		Task_struct[Local_u8_task_rem_time_counter].se_u8_rem_ticks_to_execute_task-- ; /* Decrease the remaining  time each tick for all tasks */
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	88 2f       	mov	r24, r24
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9c 01       	movw	r18, r24
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	28 59       	subi	r18, 0x98	; 152
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 59       	subi	r24, 0x98	; 152
 214:	9f 4f       	sbci	r25, 0xFF	; 255
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18

*******************************************************************************/
void schedulerStart(){
	static uint8 Local_u8_task_counter = 0 ;  /* Define counter to count the task ready to run */
	uint8 Local_u8_task_rem_time_counter ; /* Declare counter to loop on tasks to reduce the remaining time */
	for(Local_u8_task_rem_time_counter = 0 ;Local_u8_task_rem_time_counter < TTC_MAX_TASKS_NUM;Local_u8_task_rem_time_counter++){
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	28 f3       	brcs	.-54     	; 0x1f0 <schedulerStart+0xe>
		Task_struct[Local_u8_task_rem_time_counter].se_u8_rem_ticks_to_execute_task-- ; /* Decrease the remaining  time each tick for all tasks */
	}
	
	if(NUM_ZERO == Task_struct[Local_u8_task_counter].se_u8_rem_ticks_to_execute_task){ /* in case of no remaining time */
 226:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 59       	subi	r24, 0x98	; 152
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	f1 f4       	brne	.+60     	; 0x27e <schedulerStart+0x9c>
		Task_struct[Local_u8_task_counter].Ready_Tasks_PTR(); /* call the function ready to run */
 242:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	8b 59       	subi	r24, 0x9B	; 155
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	fc 01       	movw	r30, r24
 258:	80 81       	ld	r24, Z
 25a:	91 81       	ldd	r25, Z+1	; 0x01
 25c:	fc 01       	movw	r30, r24
 25e:	09 95       	icall
		Local_u8_task_counter++ ; /* move to the next function in ready functions array */
 260:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(TTC_MAX_TASKS_NUM <= Local_u8_task_counter){ /* if the functions ready to run finished */
 26a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	30 f0       	brcs	.+12     	; 0x27e <schedulerStart+0x9c>
			Local_u8_task_counter = 0 ; /* go the the first task again */
 272:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			timer0_ticks = 0 ;
 276:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer0_ticks+0x1>
 27a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer0_ticks>
		}
	}
}
 27e:	00 00       	nop
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <DIO_SetPinDirection>:

Functions Parameters : PinDirection	 (Input or Output) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <DIO_SetPinDirection+0x6>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	89 83       	std	Y+1, r24	; 0x01
 294:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinDirection){			/* check the direction of the pin wanted */
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	21 f0       	breq	.+8      	; 0x2a8 <DIO_SetPinDirection+0x20>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_SetPinDirection+0x1e>
 2a4:	7a c0       	rjmp	.+244    	; 0x39a <DIO_SetPinDirection+0x112>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
		default:
		break;
 2a6:	ef c0       	rjmp	.+478    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	b0 f4       	brcc	.+44     	; 0x2da <DIO_SetPinDirection+0x52>
				Clear_Bit(DDR_A,PinNum);
 2ae:	8a e3       	ldi	r24, 0x3A	; 58
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2a e3       	ldi	r18, 0x3A	; 58
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	f9 01       	movw	r30, r18
 2b8:	20 81       	ld	r18, Z
 2ba:	62 2f       	mov	r22, r18
 2bc:	29 81       	ldd	r18, Y+1	; 0x01
 2be:	42 2f       	mov	r20, r18
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_SetPinDirection+0x44>
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	4a 95       	dec	r20
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_SetPinDirection+0x40>
 2d0:	20 95       	com	r18
 2d2:	26 23       	and	r18, r22
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 2d8:	d3 c0       	rjmp	.+422    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
				Clear_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	e0 f0       	brcs	.+56     	; 0x318 <DIO_SetPinDirection+0x90>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	80 31       	cpi	r24, 0x10	; 16
 2e4:	c8 f4       	brcc	.+50     	; 0x318 <DIO_SetPinDirection+0x90>
				Clear_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 2e6:	87 e3       	ldi	r24, 0x37	; 55
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	27 e3       	ldi	r18, 0x37	; 55
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	62 2f       	mov	r22, r18
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	22 2f       	mov	r18, r18
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	a9 01       	movw	r20, r18
 2fc:	48 50       	subi	r20, 0x08	; 8
 2fe:	51 09       	sbc	r21, r1
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_SetPinDirection+0x82>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	4a 95       	dec	r20
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_SetPinDirection+0x7e>
 30e:	20 95       	com	r18
 310:	26 23       	and	r18, r22
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
 316:	40 c0       	rjmp	.+128    	; 0x398 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	80 31       	cpi	r24, 0x10	; 16
 31c:	e0 f0       	brcs	.+56     	; 0x356 <DIO_SetPinDirection+0xce>
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	88 31       	cpi	r24, 0x18	; 24
 322:	c8 f4       	brcc	.+50     	; 0x356 <DIO_SetPinDirection+0xce>
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 324:	84 e3       	ldi	r24, 0x34	; 52
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	24 e3       	ldi	r18, 0x34	; 52
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	62 2f       	mov	r22, r18
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	22 2f       	mov	r18, r18
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	a9 01       	movw	r20, r18
 33a:	40 51       	subi	r20, 0x10	; 16
 33c:	51 09       	sbc	r21, r1
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_SetPinDirection+0xc0>
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	4a 95       	dec	r20
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_SetPinDirection+0xbc>
 34c:	20 95       	com	r18
 34e:	26 23       	and	r18, r22
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
 354:	21 c0       	rjmp	.+66     	; 0x398 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	88 31       	cpi	r24, 0x18	; 24
 35a:	08 f4       	brcc	.+2      	; 0x35e <DIO_SetPinDirection+0xd6>
 35c:	91 c0       	rjmp	.+290    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	80 32       	cpi	r24, 0x20	; 32
 362:	08 f0       	brcs	.+2      	; 0x366 <DIO_SetPinDirection+0xde>
 364:	8d c0       	rjmp	.+282    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 366:	81 e3       	ldi	r24, 0x31	; 49
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	21 e3       	ldi	r18, 0x31	; 49
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	62 2f       	mov	r22, r18
 374:	29 81       	ldd	r18, Y+1	; 0x01
 376:	22 2f       	mov	r18, r18
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	a9 01       	movw	r20, r18
 37c:	48 51       	subi	r20, 0x18	; 24
 37e:	51 09       	sbc	r21, r1
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_SetPinDirection+0x102>
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	4a 95       	dec	r20
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_SetPinDirection+0xfe>
 38e:	20 95       	com	r18
 390:	26 23       	and	r18, r22
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
			}
		break;
 396:	74 c0       	rjmp	.+232    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 398:	73 c0       	rjmp	.+230    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	a8 f4       	brcc	.+42     	; 0x3ca <DIO_SetPinDirection+0x142>
				Set_Bit(DDR_A,PinNum);
 3a0:	8a e3       	ldi	r24, 0x3A	; 58
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	2a e3       	ldi	r18, 0x3A	; 58
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	f9 01       	movw	r30, r18
 3aa:	20 81       	ld	r18, Z
 3ac:	62 2f       	mov	r22, r18
 3ae:	29 81       	ldd	r18, Y+1	; 0x01
 3b0:	42 2f       	mov	r20, r18
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_SetPinDirection+0x136>
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	4a 95       	dec	r20
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_SetPinDirection+0x132>
 3c2:	26 2b       	or	r18, r22
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 3c8:	5d c0       	rjmp	.+186    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			}
		break;
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
				Set_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	d8 f0       	brcs	.+54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	c0 f4       	brcc	.+48     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				Set_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 3d6:	87 e3       	ldi	r24, 0x37	; 55
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	27 e3       	ldi	r18, 0x37	; 55
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	62 2f       	mov	r22, r18
 3e4:	29 81       	ldd	r18, Y+1	; 0x01
 3e6:	22 2f       	mov	r18, r18
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	48 50       	subi	r20, 0x08	; 8
 3ee:	51 09       	sbc	r21, r1
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_SetPinDirection+0x172>
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	4a 95       	dec	r20
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_SetPinDirection+0x16e>
 3fe:	26 2b       	or	r18, r22
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
 404:	3c c0       	rjmp	.+120    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	80 31       	cpi	r24, 0x10	; 16
 40a:	d8 f0       	brcs	.+54     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	88 31       	cpi	r24, 0x18	; 24
 410:	c0 f4       	brcc	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 412:	84 e3       	ldi	r24, 0x34	; 52
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	24 e3       	ldi	r18, 0x34	; 52
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f9 01       	movw	r30, r18
 41c:	20 81       	ld	r18, Z
 41e:	62 2f       	mov	r22, r18
 420:	29 81       	ldd	r18, Y+1	; 0x01
 422:	22 2f       	mov	r18, r18
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	a9 01       	movw	r20, r18
 428:	40 51       	subi	r20, 0x10	; 16
 42a:	51 09       	sbc	r21, r1
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	4a 95       	dec	r20
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	26 2b       	or	r18, r22
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
 440:	1e c0       	rjmp	.+60     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 31       	cpi	r24, 0x18	; 24
 446:	f0 f0       	brcs	.+60     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	80 32       	cpi	r24, 0x20	; 32
 44c:	d8 f4       	brcc	.+54     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 44e:	81 e3       	ldi	r24, 0x31	; 49
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	21 e3       	ldi	r18, 0x31	; 49
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	20 81       	ld	r18, Z
 45a:	62 2f       	mov	r22, r18
 45c:	29 81       	ldd	r18, Y+1	; 0x01
 45e:	22 2f       	mov	r18, r18
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	a9 01       	movw	r20, r18
 464:	48 51       	subi	r20, 0x18	; 24
 466:	51 09       	sbc	r21, r1
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	4a 95       	dec	r20
 474:	e2 f7       	brpl	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 476:	26 2b       	or	r18, r22
 478:	fc 01       	movw	r30, r24
 47a:	20 83       	st	Z, r18
			}
		break;
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 480:	00 00       	nop
 482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 484:	00 00       	nop
		default:
		break;
	}
}
 486:	00 00       	nop
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <main>:
#include "HAL/headers/DC_Motor.h"
#include "APP/TTC Schedular/TTC_Headers/TTC_Schedular.h"
#include "APP/TTC Schedular/TTC_Headers/Tasks.h"

int main(void)
{
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
	sei();
 49a:	78 94       	sei
	Tasks_init();
 49c:	0e 94 5c 00 	call	0xb8	; 0xb8 <Tasks_init>
	Schedular_init(Task_BLINK_LED1,0,1000);
 4a0:	48 ee       	ldi	r20, 0xE8	; 232
 4a2:	53 e0       	ldi	r21, 0x03	; 3
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	84 e7       	ldi	r24, 0x74	; 116
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_init>
	Schedular_init(Task_BLINK_LED2,1,2000);
 4ae:	40 ed       	ldi	r20, 0xD0	; 208
 4b0:	57 e0       	ldi	r21, 0x07	; 7
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	8a e8       	ldi	r24, 0x8A	; 138
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_init>
	Schedular_init(Task_BLINK_LED3,2,3000);
 4bc:	48 eb       	ldi	r20, 0xB8	; 184
 4be:	5b e0       	ldi	r21, 0x0B	; 11
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_init>
    while(1) 
    {
		schedulerStart();
 4ca:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <schedulerStart>
			
	}
 4ce:	fd cf       	rjmp	.-6      	; 0x4ca <main+0x38>

000004d0 <__vector_10>:
	Clear_Bit(TCCR0,5);

	
	TCNT0 = NUM_ZERO ;           
	
}
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Call_Back_Notification>
 500:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Call_Back_Notification+0x1>
 504:	fc 01       	movw	r30, r24
 506:	09 95       	icall
 508:	00 00       	nop
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <Set_Call_Back_Flag>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Call_Back_Flag>
 540:	00 00       	nop
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <Set_Call_Back>:
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer0_ticks>
 554:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer0_ticks+0x1>
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <timer0_ticks+0x1>
 55e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timer0_ticks>
 562:	0e 94 99 02 	call	0x532	; 0x532 <Set_Call_Back_Flag>
 566:	00 00       	nop
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <TIMER0_PRE_COMPILE_CONFIGURATIONS>:
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	83 e5       	ldi	r24, 0x53	; 83
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	23 e5       	ldi	r18, 0x53	; 83
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	21 60       	ori	r18, 0x01	; 1
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
 588:	83 e5       	ldi	r24, 0x53	; 83
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	23 e5       	ldi	r18, 0x53	; 83
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	22 60       	ori	r18, 0x02	; 2
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
 59a:	83 e5       	ldi	r24, 0x53	; 83
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	23 e5       	ldi	r18, 0x53	; 83
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	2b 7f       	andi	r18, 0xFB	; 251
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
 5ac:	00 00       	nop
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <TIMER0_OCR_init>:

Function Parameters  : no_of_ticks : number of ticks before clearing the output compare pin 

Function Return      : N/A
************************************************************************************************/
void TIMER0_OCR_init(uint8 no_of_ticks){
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	1f 92       	push	r1
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_PRE_COMPILE_CONFIGURATIONS();
 5c0:	0e 94 b7 02 	call	0x56e	; 0x56e <TIMER0_PRE_COMPILE_CONFIGURATIONS>
		DIO_SetPinDirection(TIMER0_OCR_PIN_NUM,OUTPUT); /* make the compare mode pin as output pin */
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	8b e0       	ldi	r24, 0x0B	; 11
 5c8:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPinDirection>
	
		Set_Bit(TCCR0,7);   /* NON PWM MODE */
 5cc:	83 e5       	ldi	r24, 0x53	; 83
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	23 e5       	ldi	r18, 0x53	; 83
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	20 68       	ori	r18, 0x80	; 128
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
		Clear_Bit(TCCR0,6); /* OCR Mode     */
 5de:	83 e5       	ldi	r24, 0x53	; 83
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	23 e5       	ldi	r18, 0x53	; 83
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	2f 7b       	andi	r18, 0xBF	; 191
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
		Set_Bit(TCCR0,3);
 5f0:	83 e5       	ldi	r24, 0x53	; 83
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	23 e5       	ldi	r18, 0x53	; 83
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	28 60       	ori	r18, 0x08	; 8
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
		Clear_Bit(TCCR0,4);	/* Clear output compare pin in compare match */
 602:	83 e5       	ldi	r24, 0x53	; 83
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	23 e5       	ldi	r18, 0x53	; 83
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	2f 7e       	andi	r18, 0xEF	; 239
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 		Set_Bit(TCCR0,5);
 614:	83 e5       	ldi	r24, 0x53	; 83
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	23 e5       	ldi	r18, 0x53	; 83
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	f9 01       	movw	r30, r18
 61e:	20 81       	ld	r18, Z
 620:	20 62       	ori	r18, 0x20	; 32
 622:	fc 01       	movw	r30, r24
 624:	20 83       	st	Z, r18
	 
	 #ifdef TIMER0_OCR_INTERRUPTS
		Set_Bit(TIMSK,1);
 626:	89 e5       	ldi	r24, 0x59	; 89
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	29 e5       	ldi	r18, 0x59	; 89
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	f9 01       	movw	r30, r18
 630:	20 81       	ld	r18, Z
 632:	22 60       	ori	r18, 0x02	; 2
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18
	 
	 #ifdef TIMER1_OVF_INTERRUPTS
		Set_Bit(TIMSK,0);
	 #endif
	
	TCNT0 = NUM_ZERO ;
 638:	82 e5       	ldi	r24, 0x52	; 82
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	fc 01       	movw	r30, r24
 63e:	10 82       	st	Z, r1
	OCR0  = no_of_ticks ;
 640:	8c e5       	ldi	r24, 0x5C	; 92
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	29 81       	ldd	r18, Y+1	; 0x01
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
}
 64a:	00 00       	nop
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
