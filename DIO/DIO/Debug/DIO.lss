
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095b  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000535  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004be  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  64:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
Functions Parameters : PinDirection	 (Input or Output) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){
  6c:	66 23       	and	r22, r22
  6e:	21 f0       	breq	.+8      	; 0x78 <DIO_SetPinDirection+0xc>
  70:	61 30       	cpi	r22, 0x01	; 1
  72:	09 f4       	brne	.+2      	; 0x76 <DIO_SetPinDirection+0xa>
  74:	48 c0       	rjmp	.+144    	; 0x106 <DIO_SetPinDirection+0x9a>
  76:	08 95       	ret
		case INPUT :
		if(PinNum >= 0 && PinNum <= 7){
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	70 f4       	brcc	.+28     	; 0x98 <DIO_SetPinDirection+0x2c>
			Clear_Bit(DDR_A,PinNum);
  7c:	4a b3       	in	r20, 0x1a	; 26
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	b9 01       	movw	r22, r18
  84:	02 c0       	rjmp	.+4      	; 0x8a <DIO_SetPinDirection+0x1e>
  86:	66 0f       	add	r22, r22
  88:	77 1f       	adc	r23, r23
  8a:	8a 95       	dec	r24
  8c:	e2 f7       	brpl	.-8      	; 0x86 <DIO_SetPinDirection+0x1a>
  8e:	cb 01       	movw	r24, r22
  90:	80 95       	com	r24
  92:	84 23       	and	r24, r20
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
			}else if(PinNum >= 8 && PinNum <= 15){
  98:	98 ef       	ldi	r25, 0xF8	; 248
  9a:	98 0f       	add	r25, r24
  9c:	98 30       	cpi	r25, 0x08	; 8
  9e:	70 f4       	brcc	.+28     	; 0xbc <DIO_SetPinDirection+0x50>
			Clear_Bit(DDR_B,(PinNum - 8));
  a0:	47 b3       	in	r20, 0x17	; 23
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_SetPinDirection+0x42>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	9a 95       	dec	r25
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_SetPinDirection+0x3e>
  b2:	cb 01       	movw	r24, r22
  b4:	80 95       	com	r24
  b6:	84 23       	and	r24, r20
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	08 95       	ret
			}else if(PinNum >= 16 && PinNum <= 23){
  bc:	90 ef       	ldi	r25, 0xF0	; 240
  be:	98 0f       	add	r25, r24
  c0:	98 30       	cpi	r25, 0x08	; 8
  c2:	70 f4       	brcc	.+28     	; 0xe0 <DIO_SetPinDirection+0x74>
			Clear_Bit(DDR_C,(PinNum - 16));
  c4:	44 b3       	in	r20, 0x14	; 20
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDirection+0x66>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	9a 95       	dec	r25
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDirection+0x62>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	84 bb       	out	0x14, r24	; 20
  de:	08 95       	ret
			}else if(PinNum >= 24 && PinNum <= 31){
  e0:	98 ee       	ldi	r25, 0xE8	; 232
  e2:	98 0f       	add	r25, r24
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_SetPinDirection+0x7e>
  e8:	4f c0       	rjmp	.+158    	; 0x188 <DIO_SetPinDirection+0x11c>
			Clear_Bit(DDR_D,(PinNum - 24));
  ea:	41 b3       	in	r20, 0x11	; 17
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDirection+0x8c>
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	9a 95       	dec	r25
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDirection+0x88>
  fc:	cb 01       	movw	r24, r22
  fe:	80 95       	com	r24
 100:	84 23       	and	r24, r20
 102:	81 bb       	out	0x11, r24	; 17
 104:	08 95       	ret
		}
		break;
		case OUTPUT :
		if(PinNum >= 0 && PinNum <= 7){
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	68 f4       	brcc	.+26     	; 0x124 <DIO_SetPinDirection+0xb8>
			Set_Bit(DDR_A,PinNum);
 10a:	4a b3       	in	r20, 0x1a	; 26
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPinDirection+0xac>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	8a 95       	dec	r24
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPinDirection+0xa8>
 11c:	cb 01       	movw	r24, r22
 11e:	84 2b       	or	r24, r20
 120:	8a bb       	out	0x1a, r24	; 26
 122:	08 95       	ret
			}else if(PinNum >= 8 && PinNum <= 15){
 124:	98 ef       	ldi	r25, 0xF8	; 248
 126:	98 0f       	add	r25, r24
 128:	98 30       	cpi	r25, 0x08	; 8
 12a:	68 f4       	brcc	.+26     	; 0x146 <DIO_SetPinDirection+0xda>
			Set_Bit(DDR_B,(PinNum - 8));
 12c:	47 b3       	in	r20, 0x17	; 23
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xce>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	9a 95       	dec	r25
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xca>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	87 bb       	out	0x17, r24	; 23
 144:	08 95       	ret
			}else if(PinNum >= 16 && PinNum <= 23){
 146:	90 ef       	ldi	r25, 0xF0	; 240
 148:	98 0f       	add	r25, r24
 14a:	98 30       	cpi	r25, 0x08	; 8
 14c:	68 f4       	brcc	.+26     	; 0x168 <DIO_SetPinDirection+0xfc>
			Set_Bit(DDR_C,(PinNum - 16));
 14e:	44 b3       	in	r20, 0x14	; 20
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDirection+0xf0>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDirection+0xec>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	84 bb       	out	0x14, r24	; 20
 166:	08 95       	ret
			}else if(PinNum >= 24 && PinNum <= 31){
 168:	98 ee       	ldi	r25, 0xE8	; 232
 16a:	98 0f       	add	r25, r24
 16c:	98 30       	cpi	r25, 0x08	; 8
 16e:	60 f4       	brcc	.+24     	; 0x188 <DIO_SetPinDirection+0x11c>
			Set_Bit(DDR_D,(PinNum - 24));
 170:	41 b3       	in	r20, 0x11	; 17
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDirection+0x112>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	9a 95       	dec	r25
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPinDirection+0x10e>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret

0000018a <Timer1_ICU_init>:
Function Parameters  : N/A

Function Return      : N/A
*********************************************************************************************/
void Timer1_ICU_init(){
	 TIMER1_PRE_COMPILE_CONFIGURATIONS();
 18a:	0e 94 01 01 	call	0x202	; 0x202 <TIMER1_PRE_COMPILE_CONFIGURATIONS>
	 DIO_SetPinDirection(TIMER1_ICU_PIN_NUM,0);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8e e1       	ldi	r24, 0x1E	; 30
 192:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	 
	 Set_Bit(TCCR1B,7);		// Noise canceler 
 196:	8e b5       	in	r24, 0x2e	; 46
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8e bd       	out	0x2e, r24	; 46
	 Set_Bit(TCCR1B,6);     // detect the rising edge at first
 19c:	8e b5       	in	r24, 0x2e	; 46
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	8e bd       	out	0x2e, r24	; 46
	 Set_Bit(TIFR,ICF1);	// clear ICU flag
 1a2:	88 b7       	in	r24, 0x38	; 56
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	88 bf       	out	0x38, r24	; 56
 1a8:	08 95       	ret

000001aa <Timer1_ICU_calculate_duty_cycle>:
*********************************************************************************************/
float Timer1_ICU_calculate_duty_cycle(){
	uint16 u16_high_time = 0 , u16_time = 0 ;
	float flt_duty_cycle ;
	
	while(Get_Bit(TIFR,ICF1) == 0);
 1aa:	08 b6       	in	r0, 0x38	; 56
 1ac:	05 fe       	sbrs	r0, 5
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <Timer1_ICU_calculate_duty_cycle>
	Set_Bit(TIFR,ICF1);  // clear ICU flag
 1b0:	88 b7       	in	r24, 0x38	; 56
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	88 bf       	out	0x38, r24	; 56
	TCNT1H = 0 ;
 1b6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0 ;
 1b8:	1c bc       	out	0x2c, r1	; 44
	Clear_Bit(TCCR1B,6); // detect falling edge
 1ba:	8e b5       	in	r24, 0x2e	; 46
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	8e bd       	out	0x2e, r24	; 46
	while(Get_Bit(TIFR,ICF1) == 0);
 1c0:	08 b6       	in	r0, 0x38	; 56
 1c2:	05 fe       	sbrs	r0, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <Timer1_ICU_calculate_duty_cycle+0x16>
	Set_Bit(TIFR,ICF1);
 1c6:	88 b7       	in	r24, 0x38	; 56
 1c8:	80 62       	ori	r24, 0x20	; 32
 1ca:	88 bf       	out	0x38, r24	; 56
	u16_high_time = ICR1H ;
 1cc:	87 b5       	in	r24, 0x27	; 39
	u16_high_time = u16_high_time << 8 ;
	u16_high_time = ICR1L ;
 1ce:	66 b5       	in	r22, 0x26	; 38
 1d0:	70 e0       	ldi	r23, 0x00	; 0
	
	Set_Bit(TCCR1B,6); // detect rising edge
 1d2:	8e b5       	in	r24, 0x2e	; 46
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	8e bd       	out	0x2e, r24	; 46
	while(Get_Bit(TIFR,ICF1) == 0);
 1d8:	08 b6       	in	r0, 0x38	; 56
 1da:	05 fe       	sbrs	r0, 5
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <Timer1_ICU_calculate_duty_cycle+0x2e>
	Set_Bit(TIFR,ICF1);
 1de:	88 b7       	in	r24, 0x38	; 56
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	88 bf       	out	0x38, r24	; 56
	u16_time = ICR1H ;
 1e4:	87 b5       	in	r24, 0x27	; 39
	u16_time = u16_high_time << 8 ;
	u16_time = ICR1L ;
 1e6:	86 b5       	in	r24, 0x26	; 38
	
	flt_duty_cycle = (u16_time / u16_high_time ) ;
	
	return flt_duty_cycle ;
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 48 01 	call	0x290	; 0x290 <__udivmodhi4>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 0b 01 	call	0x216	; 0x216 <__floatunsisf>
 1f6:	08 95       	ret

000001f8 <main>:
#include "ICU.h"

int main(void)
{
    /* Replace with your application code */
	Timer1_ICU_init();
 1f8:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer1_ICU_init>
	
	float d_c ;
    while(1) 
    {
		d_c = Timer1_ICU_calculate_duty_cycle();
 1fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Timer1_ICU_calculate_duty_cycle>
 200:	fd cf       	rjmp	.-6      	; 0x1fc <main+0x4>

00000202 <TIMER1_PRE_COMPILE_CONFIGURATIONS>:
	#elif(TIMER1_PRESCALER == 8)
		Clear_Bit(TCCR1B,0);
		Set_Bit(TCCR1B,1);
		Clear_Bit(TCCR1B,2);
	#elif(TIMER1_PRESCALER == 64)
		Set_Bit(TCCR1B,0);
 202:	8e b5       	in	r24, 0x2e	; 46
 204:	81 60       	ori	r24, 0x01	; 1
 206:	8e bd       	out	0x2e, r24	; 46
		Set_Bit(TCCR1B,1);
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	8e bd       	out	0x2e, r24	; 46
		Clear_Bit(TCCR1B,2);
 20e:	8e b5       	in	r24, 0x2e	; 46
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	8e bd       	out	0x2e, r24	; 46
 214:	08 95       	ret

00000216 <__floatunsisf>:
 216:	e8 94       	clt
 218:	09 c0       	rjmp	.+18     	; 0x22c <__floatsisf+0x12>

0000021a <__floatsisf>:
 21a:	97 fb       	bst	r25, 7
 21c:	3e f4       	brtc	.+14     	; 0x22c <__floatsisf+0x12>
 21e:	90 95       	com	r25
 220:	80 95       	com	r24
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	8f 4f       	sbci	r24, 0xFF	; 255
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	99 23       	and	r25, r25
 22e:	a9 f0       	breq	.+42     	; 0x25a <__floatsisf+0x40>
 230:	f9 2f       	mov	r31, r25
 232:	96 e9       	ldi	r25, 0x96	; 150
 234:	bb 27       	eor	r27, r27
 236:	93 95       	inc	r25
 238:	f6 95       	lsr	r31
 23a:	87 95       	ror	r24
 23c:	77 95       	ror	r23
 23e:	67 95       	ror	r22
 240:	b7 95       	ror	r27
 242:	f1 11       	cpse	r31, r1
 244:	f8 cf       	rjmp	.-16     	; 0x236 <__floatsisf+0x1c>
 246:	fa f4       	brpl	.+62     	; 0x286 <__floatsisf+0x6c>
 248:	bb 0f       	add	r27, r27
 24a:	11 f4       	brne	.+4      	; 0x250 <__floatsisf+0x36>
 24c:	60 ff       	sbrs	r22, 0
 24e:	1b c0       	rjmp	.+54     	; 0x286 <__floatsisf+0x6c>
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	8f 4f       	sbci	r24, 0xFF	; 255
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	16 c0       	rjmp	.+44     	; 0x286 <__floatsisf+0x6c>
 25a:	88 23       	and	r24, r24
 25c:	11 f0       	breq	.+4      	; 0x262 <__floatsisf+0x48>
 25e:	96 e9       	ldi	r25, 0x96	; 150
 260:	11 c0       	rjmp	.+34     	; 0x284 <__floatsisf+0x6a>
 262:	77 23       	and	r23, r23
 264:	21 f0       	breq	.+8      	; 0x26e <__floatsisf+0x54>
 266:	9e e8       	ldi	r25, 0x8E	; 142
 268:	87 2f       	mov	r24, r23
 26a:	76 2f       	mov	r23, r22
 26c:	05 c0       	rjmp	.+10     	; 0x278 <__floatsisf+0x5e>
 26e:	66 23       	and	r22, r22
 270:	71 f0       	breq	.+28     	; 0x28e <__floatsisf+0x74>
 272:	96 e8       	ldi	r25, 0x86	; 134
 274:	86 2f       	mov	r24, r22
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	2a f0       	brmi	.+10     	; 0x286 <__floatsisf+0x6c>
 27c:	9a 95       	dec	r25
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	da f7       	brpl	.-10     	; 0x27c <__floatsisf+0x62>
 286:	88 0f       	add	r24, r24
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	97 f9       	bld	r25, 7
 28e:	08 95       	ret

00000290 <__udivmodhi4>:
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	51 e1       	ldi	r21, 0x11	; 17
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <__udivmodhi4_ep>

00000298 <__udivmodhi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	a6 17       	cp	r26, r22
 29e:	b7 07       	cpc	r27, r23
 2a0:	10 f0       	brcs	.+4      	; 0x2a6 <__udivmodhi4_ep>
 2a2:	a6 1b       	sub	r26, r22
 2a4:	b7 0b       	sbc	r27, r23

000002a6 <__udivmodhi4_ep>:
 2a6:	88 1f       	adc	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	5a 95       	dec	r21
 2ac:	a9 f7       	brne	.-22     	; 0x298 <__udivmodhi4_loop>
 2ae:	80 95       	com	r24
 2b0:	90 95       	com	r25
 2b2:	bc 01       	movw	r22, r24
 2b4:	cd 01       	movw	r24, r26
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
