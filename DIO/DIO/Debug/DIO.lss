
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000976  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5d  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb9  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00002b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b9  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_10>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 05 03 	call	0x60a	; 0x60a <main>
  8a:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
	DIO_SetPinDirection(TRAFFIC_STOP_LED_NUM,OUTPUT);
	DIO_SetPinDirection(TRAFFIC_WAIT_LED_NUM,OUTPUT);
	DIO_SetPinDirection(TRAFFIC_GO_LED_NUM,OUTPUT);
	DIO_SetPinDirection(TRAFFIC_BTN_NUM,INPUT);
	TIMER0_OCR_init(ONE_MS_TICKS);
}
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	00 00       	nop
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	0f 90       	pop	r0
  ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_10>:
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	0e 94 89 00 	call	0x112	; 0x112 <Traffic_light_delay_ISR>
  e8:	00 00       	nop
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <Traffic_light_delay_ISR>:

Function Return      : N/A

*******************************************************************************/

void Traffic_light_delay_ISR(){
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	Global_u16_delay_ticks++ ;
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 11e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	if(Global_u16_delay_ticks < ONE_THOUSAND){
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 130:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 134:	88 3e       	cpi	r24, 0xE8	; 232
 136:	93 40       	sbci	r25, 0x03	; 3
 138:	10 f4       	brcc	.+4      	; 0x13e <Traffic_light_delay_ISR+0x2c>
		sei();
 13a:	78 94       	sei
	}else{
		Global_u16_delay_ticks = 0 ;
	}
}
 13c:	04 c0       	rjmp	.+8      	; 0x146 <Traffic_light_delay_ISR+0x34>
void Traffic_light_delay_ISR(){
	Global_u16_delay_ticks++ ;
	if(Global_u16_delay_ticks < ONE_THOUSAND){
		sei();
	}else{
		Global_u16_delay_ticks = 0 ;
 13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
	}
}
 146:	00 00       	nop
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <DIO_WritePin>:

Functions Parameters : PinValue (0,1) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <DIO_WritePin+0x6>
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinValue){								/* check the value of the written pin */
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	21 f0       	breq	.+8      	; 0x16e <DIO_WritePin+0x20>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	09 f4       	brne	.+2      	; 0x16c <DIO_WritePin+0x1e>
 16a:	7a c0       	rjmp	.+244    	; 0x260 <DIO_WritePin+0x112>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
		default:
		break;
 16c:	ef c0       	rjmp	.+478    	; 0x34c <DIO_WritePin+0x1fe>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	switch(PinValue){								/* check the value of the written pin */
		case LOW :									/* case the pin has low value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){	/* check porta pins */
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	b0 f4       	brcc	.+44     	; 0x1a0 <DIO_WritePin+0x52>
				Clear_Bit(PORT_A,PinNum);				/* clear the pin wanted */
 174:	8b e3       	ldi	r24, 0x3B	; 59
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2b e3       	ldi	r18, 0x3B	; 59
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	62 2f       	mov	r22, r18
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	42 2f       	mov	r20, r18
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_WritePin+0x44>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	4a 95       	dec	r20
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_WritePin+0x40>
 196:	20 95       	com	r18
 198:	26 23       	and	r18, r22
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
			}
		break;
 19e:	d3 c0       	rjmp	.+422    	; 0x346 <DIO_WritePin+0x1f8>
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	switch(PinValue){								/* check the value of the written pin */
		case LOW :									/* case the pin has low value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){	/* check porta pins */
				Clear_Bit(PORT_A,PinNum);				/* clear the pin wanted */
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){ /* check portb pins */
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	e0 f0       	brcs	.+56     	; 0x1de <DIO_WritePin+0x90>
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	80 31       	cpi	r24, 0x10	; 16
 1aa:	c8 f4       	brcc	.+50     	; 0x1de <DIO_WritePin+0x90>
				Clear_Bit(PORT_B,(PinNum - PORTB_STARTING_PIN_NUM));	/* clear the pin wanted */
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	28 e3       	ldi	r18, 0x38	; 56
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	62 2f       	mov	r22, r18
 1ba:	29 81       	ldd	r18, Y+1	; 0x01
 1bc:	22 2f       	mov	r18, r18
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	a9 01       	movw	r20, r18
 1c2:	48 50       	subi	r20, 0x08	; 8
 1c4:	51 09       	sbc	r21, r1
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_WritePin+0x82>
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	4a 95       	dec	r20
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_WritePin+0x7e>
 1d4:	20 95       	com	r18
 1d6:	26 23       	and	r18, r22
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
 1dc:	40 c0       	rjmp	.+128    	; 0x25e <DIO_WritePin+0x110>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	80 31       	cpi	r24, 0x10	; 16
 1e2:	e0 f0       	brcs	.+56     	; 0x21c <DIO_WritePin+0xce>
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 31       	cpi	r24, 0x18	; 24
 1e8:	c8 f4       	brcc	.+50     	; 0x21c <DIO_WritePin+0xce>
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
 1ea:	85 e3       	ldi	r24, 0x35	; 53
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	25 e3       	ldi	r18, 0x35	; 53
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	62 2f       	mov	r22, r18
 1f8:	29 81       	ldd	r18, Y+1	; 0x01
 1fa:	22 2f       	mov	r18, r18
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	a9 01       	movw	r20, r18
 200:	40 51       	subi	r20, 0x10	; 16
 202:	51 09       	sbc	r21, r1
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_WritePin+0xc0>
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	4a 95       	dec	r20
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_WritePin+0xbc>
 212:	20 95       	com	r18
 214:	26 23       	and	r18, r22
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
 21a:	21 c0       	rjmp	.+66     	; 0x25e <DIO_WritePin+0x110>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	88 31       	cpi	r24, 0x18	; 24
 220:	08 f4       	brcc	.+2      	; 0x224 <DIO_WritePin+0xd6>
 222:	91 c0       	rjmp	.+290    	; 0x346 <DIO_WritePin+0x1f8>
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	80 32       	cpi	r24, 0x20	; 32
 228:	08 f0       	brcs	.+2      	; 0x22c <DIO_WritePin+0xde>
 22a:	8d c0       	rjmp	.+282    	; 0x346 <DIO_WritePin+0x1f8>
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	22 e3       	ldi	r18, 0x32	; 50
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	62 2f       	mov	r22, r18
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	22 2f       	mov	r18, r18
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	a9 01       	movw	r20, r18
 242:	48 51       	subi	r20, 0x18	; 24
 244:	51 09       	sbc	r21, r1
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePin+0x102>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	4a 95       	dec	r20
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePin+0xfe>
 254:	20 95       	com	r18
 256:	26 23       	and	r18, r22
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
			}
		break;
 25c:	74 c0       	rjmp	.+232    	; 0x346 <DIO_WritePin+0x1f8>
 25e:	73 c0       	rjmp	.+230    	; 0x346 <DIO_WritePin+0x1f8>
		case HIGH :		/* case the pin has high value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){ /* check porta pins */
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	88 30       	cpi	r24, 0x08	; 8
 264:	a8 f4       	brcc	.+42     	; 0x290 <DIO_WritePin+0x142>
				Set_Bit(PORT_A,PinNum);	/* set the pin wanted */
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2b e3       	ldi	r18, 0x3B	; 59
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	62 2f       	mov	r22, r18
 274:	29 81       	ldd	r18, Y+1	; 0x01
 276:	42 2f       	mov	r20, r18
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_WritePin+0x136>
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	4a 95       	dec	r20
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_WritePin+0x132>
 288:	26 2b       	or	r18, r22
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
 28e:	5d c0       	rjmp	.+186    	; 0x34a <DIO_WritePin+0x1fc>
			}
		break;
		case HIGH :		/* case the pin has high value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){ /* check porta pins */
				Set_Bit(PORT_A,PinNum);	/* set the pin wanted */
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){ /* check portb pins */
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	d8 f0       	brcs	.+54     	; 0x2cc <DIO_WritePin+0x17e>
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	80 31       	cpi	r24, 0x10	; 16
 29a:	c0 f4       	brcc	.+48     	; 0x2cc <DIO_WritePin+0x17e>
				Set_Bit(PORT_B,(PinNum - PORTB_STARTING_PIN_NUM)); /* set the pin wanted */
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	28 e3       	ldi	r18, 0x38	; 56
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	62 2f       	mov	r22, r18
 2aa:	29 81       	ldd	r18, Y+1	; 0x01
 2ac:	22 2f       	mov	r18, r18
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	48 50       	subi	r20, 0x08	; 8
 2b4:	51 09       	sbc	r21, r1
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WritePin+0x172>
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	4a 95       	dec	r20
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WritePin+0x16e>
 2c4:	26 2b       	or	r18, r22
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	3c c0       	rjmp	.+120    	; 0x344 <DIO_WritePin+0x1f6>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	d8 f0       	brcs	.+54     	; 0x308 <DIO_WritePin+0x1ba>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	c0 f4       	brcc	.+48     	; 0x308 <DIO_WritePin+0x1ba>
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
 2d8:	85 e3       	ldi	r24, 0x35	; 53
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	25 e3       	ldi	r18, 0x35	; 53
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f9 01       	movw	r30, r18
 2e2:	20 81       	ld	r18, Z
 2e4:	62 2f       	mov	r22, r18
 2e6:	29 81       	ldd	r18, Y+1	; 0x01
 2e8:	22 2f       	mov	r18, r18
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	a9 01       	movw	r20, r18
 2ee:	40 51       	subi	r20, 0x10	; 16
 2f0:	51 09       	sbc	r21, r1
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_WritePin+0x1ae>
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	4a 95       	dec	r20
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_WritePin+0x1aa>
 300:	26 2b       	or	r18, r22
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
 306:	1e c0       	rjmp	.+60     	; 0x344 <DIO_WritePin+0x1f6>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	88 31       	cpi	r24, 0x18	; 24
 30c:	f0 f0       	brcs	.+60     	; 0x34a <DIO_WritePin+0x1fc>
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	80 32       	cpi	r24, 0x20	; 32
 312:	d8 f4       	brcc	.+54     	; 0x34a <DIO_WritePin+0x1fc>
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
 314:	82 e3       	ldi	r24, 0x32	; 50
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	22 e3       	ldi	r18, 0x32	; 50
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	62 2f       	mov	r22, r18
 322:	29 81       	ldd	r18, Y+1	; 0x01
 324:	22 2f       	mov	r18, r18
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	a9 01       	movw	r20, r18
 32a:	48 51       	subi	r20, 0x18	; 24
 32c:	51 09       	sbc	r21, r1
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_WritePin+0x1ea>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	4a 95       	dec	r20
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_WritePin+0x1e6>
 33c:	26 2b       	or	r18, r22
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
			}			
		break;
 342:	03 c0       	rjmp	.+6      	; 0x34a <DIO_WritePin+0x1fc>
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_WritePin+0x1fc>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
			}
		break;
 346:	00 00       	nop
 348:	01 c0       	rjmp	.+2      	; 0x34c <DIO_WritePin+0x1fe>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
 34a:	00 00       	nop
		default:
		break;
	}
}
 34c:	00 00       	nop
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <DIO_SetPinDirection>:

Functions Parameters : PinDirection	 (Input or Output) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <DIO_SetPinDirection+0x6>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinDirection){			/* check the direction of the pin wanted */
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	21 f0       	breq	.+8      	; 0x378 <DIO_SetPinDirection+0x20>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_SetPinDirection+0x1e>
 374:	7a c0       	rjmp	.+244    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
		default:
		break;
 376:	ef c0       	rjmp	.+478    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 30       	cpi	r24, 0x08	; 8
 37c:	b0 f4       	brcc	.+44     	; 0x3aa <DIO_SetPinDirection+0x52>
				Clear_Bit(DDR_A,PinNum);
 37e:	8a e3       	ldi	r24, 0x3A	; 58
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	2a e3       	ldi	r18, 0x3A	; 58
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	62 2f       	mov	r22, r18
 38c:	29 81       	ldd	r18, Y+1	; 0x01
 38e:	42 2f       	mov	r20, r18
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_SetPinDirection+0x44>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	4a 95       	dec	r20
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_SetPinDirection+0x40>
 3a0:	20 95       	com	r18
 3a2:	26 23       	and	r18, r22
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 3a8:	d3 c0       	rjmp	.+422    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
				Clear_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	88 30       	cpi	r24, 0x08	; 8
 3ae:	e0 f0       	brcs	.+56     	; 0x3e8 <DIO_SetPinDirection+0x90>
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	80 31       	cpi	r24, 0x10	; 16
 3b4:	c8 f4       	brcc	.+50     	; 0x3e8 <DIO_SetPinDirection+0x90>
				Clear_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 3b6:	87 e3       	ldi	r24, 0x37	; 55
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	27 e3       	ldi	r18, 0x37	; 55
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	62 2f       	mov	r22, r18
 3c4:	29 81       	ldd	r18, Y+1	; 0x01
 3c6:	22 2f       	mov	r18, r18
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	a9 01       	movw	r20, r18
 3cc:	48 50       	subi	r20, 0x08	; 8
 3ce:	51 09       	sbc	r21, r1
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinDirection+0x82>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinDirection+0x7e>
 3de:	20 95       	com	r18
 3e0:	26 23       	and	r18, r22
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
 3e6:	40 c0       	rjmp	.+128    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	80 31       	cpi	r24, 0x10	; 16
 3ec:	e0 f0       	brcs	.+56     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 31       	cpi	r24, 0x18	; 24
 3f2:	c8 f4       	brcc	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 3f4:	84 e3       	ldi	r24, 0x34	; 52
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	24 e3       	ldi	r18, 0x34	; 52
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	f9 01       	movw	r30, r18
 3fe:	20 81       	ld	r18, Z
 400:	62 2f       	mov	r22, r18
 402:	29 81       	ldd	r18, Y+1	; 0x01
 404:	22 2f       	mov	r18, r18
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	a9 01       	movw	r20, r18
 40a:	40 51       	subi	r20, 0x10	; 16
 40c:	51 09       	sbc	r21, r1
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	4a 95       	dec	r20
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	20 95       	com	r18
 41e:	26 23       	and	r18, r22
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
 424:	21 c0       	rjmp	.+66     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	88 31       	cpi	r24, 0x18	; 24
 42a:	08 f4       	brcc	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	91 c0       	rjmp	.+290    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	80 32       	cpi	r24, 0x20	; 32
 432:	08 f0       	brcs	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	8d c0       	rjmp	.+282    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 436:	81 e3       	ldi	r24, 0x31	; 49
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	21 e3       	ldi	r18, 0x31	; 49
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	62 2f       	mov	r22, r18
 444:	29 81       	ldd	r18, Y+1	; 0x01
 446:	22 2f       	mov	r18, r18
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	a9 01       	movw	r20, r18
 44c:	48 51       	subi	r20, 0x18	; 24
 44e:	51 09       	sbc	r21, r1
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	4a 95       	dec	r20
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	20 95       	com	r18
 460:	26 23       	and	r18, r22
 462:	fc 01       	movw	r30, r24
 464:	20 83       	st	Z, r18
			}
		break;
 466:	74 c0       	rjmp	.+232    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 468:	73 c0       	rjmp	.+230    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	a8 f4       	brcc	.+42     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
				Set_Bit(DDR_A,PinNum);
 470:	8a e3       	ldi	r24, 0x3A	; 58
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	2a e3       	ldi	r18, 0x3A	; 58
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	20 81       	ld	r18, Z
 47c:	62 2f       	mov	r22, r18
 47e:	29 81       	ldd	r18, Y+1	; 0x01
 480:	42 2f       	mov	r20, r18
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	4a 95       	dec	r20
 490:	e2 f7       	brpl	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 492:	26 2b       	or	r18, r22
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 498:	5d c0       	rjmp	.+186    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			}
		break;
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
				Set_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	88 30       	cpi	r24, 0x08	; 8
 49e:	d8 f0       	brcs	.+54     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	80 31       	cpi	r24, 0x10	; 16
 4a4:	c0 f4       	brcc	.+48     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				Set_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 4a6:	87 e3       	ldi	r24, 0x37	; 55
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	27 e3       	ldi	r18, 0x37	; 55
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	62 2f       	mov	r22, r18
 4b4:	29 81       	ldd	r18, Y+1	; 0x01
 4b6:	22 2f       	mov	r18, r18
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	a9 01       	movw	r20, r18
 4bc:	48 50       	subi	r20, 0x08	; 8
 4be:	51 09       	sbc	r21, r1
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	4a 95       	dec	r20
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	26 2b       	or	r18, r22
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18
 4d4:	3c c0       	rjmp	.+120    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	80 31       	cpi	r24, 0x10	; 16
 4da:	d8 f0       	brcs	.+54     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	88 31       	cpi	r24, 0x18	; 24
 4e0:	c0 f4       	brcc	.+48     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 4e2:	84 e3       	ldi	r24, 0x34	; 52
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	24 e3       	ldi	r18, 0x34	; 52
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	62 2f       	mov	r22, r18
 4f0:	29 81       	ldd	r18, Y+1	; 0x01
 4f2:	22 2f       	mov	r18, r18
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	40 51       	subi	r20, 0x10	; 16
 4fa:	51 09       	sbc	r21, r1
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	4a 95       	dec	r20
 508:	e2 f7       	brpl	.-8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 50a:	26 2b       	or	r18, r22
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
 510:	1e c0       	rjmp	.+60     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	88 31       	cpi	r24, 0x18	; 24
 516:	f0 f0       	brcs	.+60     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	80 32       	cpi	r24, 0x20	; 32
 51c:	d8 f4       	brcc	.+54     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 51e:	81 e3       	ldi	r24, 0x31	; 49
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	21 e3       	ldi	r18, 0x31	; 49
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	62 2f       	mov	r22, r18
 52c:	29 81       	ldd	r18, Y+1	; 0x01
 52e:	22 2f       	mov	r18, r18
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	48 51       	subi	r20, 0x18	; 24
 536:	51 09       	sbc	r21, r1
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	4a 95       	dec	r20
 544:	e2 f7       	brpl	.-8      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 546:	26 2b       	or	r18, r22
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
			}
		break;
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 550:	00 00       	nop
 552:	01 c0       	rjmp	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 554:	00 00       	nop
		default:
		break;
	}
}
 556:	00 00       	nop
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <DC_Motor_init>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void DC_Motor_init(){
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
	/* Make the Directions Pins of the Motor as Output pins */
	DIO_SetPinDirection(DC_MOTOR_DIRECTION_PIN0_NUM,OUTPUT);
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	8e e1       	ldi	r24, 0x1E	; 30
 56e:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_SetPinDirection>
	DIO_SetPinDirection(DC_MOTOR_DIRECTION_PIN1_NUM,OUTPUT); 
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	8f e1       	ldi	r24, 0x1F	; 31
 576:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_SetPinDirection>
	
	/* Select the channel connected with interfacing */
	#if(DC_MOTOR1_CONNECTION == DC_MOTOR_TIMER1_CHA)
		TIMER1_FAST_PWM_init('A',TIMER1_FAST_PWM_CLAER_PIN_OCR);
 57a:	62 e0       	ldi	r22, 0x02	; 2
 57c:	81 e4       	ldi	r24, 0x41	; 65
 57e:	0e 94 1c 03 	call	0x638	; 0x638 <TIMER1_FAST_PWM_init>
	#elif(DC_MOTOR1_CONNECTION == DC_MOTOR_TIMER1_CHB)
		TIMER1_FAST_PWM_init('B',TIMER1_FAST_PWM_CLAER_PIN_OCR);
	#else
		#error " Check the Motor Connection with Timer Pins "	
	#endif
}
 582:	00 00       	nop
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <DC_Motor1_direction>:

Function Return      : N/A

*******************************************************************************/

void DC_Motor1_direction(uint8 u8_DC_Motor_dir){
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	1f 92       	push	r1
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	89 83       	std	Y+1, r24	; 0x01
	/* Select the direction of the pins */
	switch(u8_DC_Motor_dir){
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	88 2f       	mov	r24, r24
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	91 05       	cpc	r25, r1
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <DC_Motor1_direction+0x36>
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	91 05       	cpc	r25, r1
 5a6:	a9 f0       	breq	.+42     	; 0x5d2 <DC_Motor1_direction+0x48>
 5a8:	89 2b       	or	r24, r25
 5aa:	09 f0       	breq	.+2      	; 0x5ae <DC_Motor1_direction+0x24>
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN0_NUM,LOW);
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN1_NUM,LOW);		
		break;
		
	}
}
 5ac:	1b c0       	rjmp	.+54     	; 0x5e4 <DC_Motor1_direction+0x5a>

void DC_Motor1_direction(uint8 u8_DC_Motor_dir){
	/* Select the direction of the pins */
	switch(u8_DC_Motor_dir){
		case DC_MOTOR_COUNTER_CW :
				DIO_WritePin(DC_MOTOR_DIRECTION_PIN0_NUM,HIGH);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	8e e1       	ldi	r24, 0x1E	; 30
 5b2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
				DIO_WritePin(DC_MOTOR_DIRECTION_PIN1_NUM,LOW);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	8f e1       	ldi	r24, 0x1F	; 31
 5ba:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
		break;
 5be:	12 c0       	rjmp	.+36     	; 0x5e4 <DC_Motor1_direction+0x5a>
		case DC_MOTOR_CW		 :
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN0_NUM,LOW);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	8e e1       	ldi	r24, 0x1E	; 30
 5c4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN1_NUM,HIGH);
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	8f e1       	ldi	r24, 0x1F	; 31
 5cc:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
		break;
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <DC_Motor1_direction+0x5a>
		case DC_MOTOR_STOP		 :
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN0_NUM,LOW);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	8e e1       	ldi	r24, 0x1E	; 30
 5d6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
			DIO_WritePin(DC_MOTOR_DIRECTION_PIN1_NUM,LOW);		
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	8f e1       	ldi	r24, 0x1F	; 31
 5de:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_WritePin>
		break;
 5e2:	00 00       	nop
		
	}
}
 5e4:	00 00       	nop
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <DC_MOTOR1_Control_Speed>:

Function Return      : N/A

*******************************************************************************/

void DC_MOTOR1_Control_Speed(uint8 u8_duty_cycle){
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	1f 92       	push	r1
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	89 83       	std	Y+1, r24	; 0x01
	/* change the duty cycle of the TIMER to change the speed of the Motor */
	TIMER1_FAST_PWM_OCR_VALS_using_DC(u8_duty_cycle);
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	0e 94 41 04 	call	0x882	; 0x882 <TIMER1_FAST_PWM_OCR_VALS_using_DC>
}
 600:	00 00       	nop
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <main>:
#include "APP/Questions/questions.h"
#include "APP/Traffic_light_int/Traffic_light_int.h"
#include "HAL/headers/DC_Motor.h"

int main(void)
{
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
	uint8 i ;
    /* Replace with your application code */
	DC_Motor_init();
 612:	0e 94 b1 02 	call	0x562	; 0x562 <DC_Motor_init>
	DC_Motor1_direction(DC_MOTOR_CW);
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 c5 02 	call	0x58a	; 0x58a <DC_Motor1_direction>
	DC_MOTOR1_Control_Speed(200);
 61c:	88 ec       	ldi	r24, 0xC8	; 200
 61e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <DC_MOTOR1_Control_Speed>
	//	for(i=1;i<10;i++){
	//		DC_MOTOR1_Control_Speed(200);
	//		_delay_ms(2000);
	//	}

	}
 622:	ff cf       	rjmp	.-2      	; 0x622 <main+0x18>

00000624 <TIMER1_FAST_PWM_Pre_Compile_Config>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void TIMER1_FAST_PWM_Pre_Compile_Config(){
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_PRE_COMPILE_CONFIGURATIONS();
 62c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <TIMER1_PRE_COMPILE_CONFIGURATIONS>
}
 630:	00 00       	nop
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <TIMER1_FAST_PWM_init>:
					   
					   
Function Return      : N/A

*******************************************************************************/
void TIMER1_FAST_PWM_init(uint8 u8_PWM_channel,uint8 u8_OCR_action){
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	00 d0       	rcall	.+0      	; 0x63e <TIMER1_FAST_PWM_init+0x6>
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	6a 83       	std	Y+2, r22	; 0x02
	TIMER1_FAST_PWM_Pre_Compile_Config();
 646:	0e 94 12 03 	call	0x624	; 0x624 <TIMER1_FAST_PWM_Pre_Compile_Config>
	/* Select Fast PWM mode 10 bits */
	Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_WAVEFORM_GENERATION_MODE_BIT1);
 64a:	8f e4       	ldi	r24, 0x4F	; 79
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2f e4       	ldi	r18, 0x4F	; 79
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	22 60       	ori	r18, 0x02	; 2
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
	Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_WAVEFORM_GENERATION_MODE_BIT0);
 65c:	8f e4       	ldi	r24, 0x4F	; 79
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2f e4       	ldi	r18, 0x4F	; 79
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	21 60       	ori	r18, 0x01	; 1
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
	Set_Bit(TIMER1_CONTROL_REG_1B,TIMER1_WAVEFORM_GENERATION_MODE_BIT2);
 66e:	8e e4       	ldi	r24, 0x4E	; 78
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	2e e4       	ldi	r18, 0x4E	; 78
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	28 60       	ori	r18, 0x08	; 8
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
	/* Make the TIMER1 counter register start from Zero */
	TIMER1_COUNT_DATA_REG_HIGH = NUM_ZERO ;
 680:	8d e4       	ldi	r24, 0x4D	; 77
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	10 82       	st	Z, r1
	TIMER1_COUNT_DATA_REG_LOW = NUM_ZERO ;
 688:	8c e4       	ldi	r24, 0x4C	; 76
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	fc 01       	movw	r30, r24
 68e:	10 82       	st	Z, r1
	
	switch(u8_PWM_channel){
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	81 34       	cpi	r24, 0x41	; 65
 698:	91 05       	cpc	r25, r1
 69a:	29 f0       	breq	.+10     	; 0x6a6 <TIMER1_FAST_PWM_init+0x6e>
 69c:	82 34       	cpi	r24, 0x42	; 66
 69e:	91 05       	cpc	r25, r1
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <TIMER1_FAST_PWM_init+0x6c>
 6a2:	67 c0       	rjmp	.+206    	; 0x772 <TIMER1_FAST_PWM_init+0x13a>
						
					}						
		break;
		default:
		
		break ;
 6a4:	ce c0       	rjmp	.+412    	; 0x842 <TIMER1_FAST_PWM_init+0x20a>
	TIMER1_COUNT_DATA_REG_LOW = NUM_ZERO ;
	
	switch(u8_PWM_channel){
		/* Channel A */
		case 'A' :
				DIO_SetPinDirection(TIMER1_PWM_CHA_PIN_NUM,OUTPUT); /* Channel A pin output pin */
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	8d e1       	ldi	r24, 0x1D	; 29
 6aa:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_SetPinDirection>
				Set_Bit(TIMER1_INTERRUPT_MASK_REG,TIMER1_OCR_CHA_INTERRUPT_ENABLE_BIT); /* Enable OCR CHA interrupt */
 6ae:	89 e5       	ldi	r24, 0x59	; 89
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	29 e5       	ldi	r18, 0x59	; 89
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	f9 01       	movw	r30, r18
 6b8:	20 81       	ld	r18, Z
 6ba:	20 61       	ori	r18, 0x10	; 16
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
				
				/* Determine the Action of OCR pin in OCR match */
					if(u8_OCR_action == TIMER1_FAST_PWM_NORMAL_PIN){
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	88 23       	and	r24, r24
 6c4:	99 f4       	brne	.+38     	; 0x6ec <TIMER1_FAST_PWM_init+0xb4>
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
 6c6:	8f e4       	ldi	r24, 0x4F	; 79
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	2f e4       	ldi	r18, 0x4F	; 79
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	f9 01       	movw	r30, r18
 6d0:	20 81       	ld	r18, Z
 6d2:	2f 77       	andi	r18, 0x7F	; 127
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);
 6d8:	8f e4       	ldi	r24, 0x4F	; 79
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	2f e4       	ldi	r18, 0x4F	; 79
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	f9 01       	movw	r30, r18
 6e2:	20 81       	ld	r18, Z
 6e4:	2f 7b       	andi	r18, 0xBF	; 191
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else{
						
					}
		break;
 6ea:	a8 c0       	rjmp	.+336    	; 0x83c <TIMER1_FAST_PWM_init+0x204>
				
				/* Determine the Action of OCR pin in OCR match */
					if(u8_OCR_action == TIMER1_FAST_PWM_NORMAL_PIN){
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);
					}else if(u8_OCR_action == TIMER1_FAST_PWM_TOGGLE_PIN_OCR){
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	99 f4       	brne	.+38     	; 0x718 <TIMER1_FAST_PWM_init+0xe0>
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
 6f2:	8f e4       	ldi	r24, 0x4F	; 79
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2f e4       	ldi	r18, 0x4F	; 79
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	20 81       	ld	r18, Z
 6fe:	2f 77       	andi	r18, 0x7F	; 127
 700:	fc 01       	movw	r30, r24
 702:	20 83       	st	Z, r18
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
 704:	8f e4       	ldi	r24, 0x4F	; 79
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	2f e4       	ldi	r18, 0x4F	; 79
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	f9 01       	movw	r30, r18
 70e:	20 81       	ld	r18, Z
 710:	20 64       	ori	r18, 0x40	; 64
 712:	fc 01       	movw	r30, r24
 714:	20 83       	st	Z, r18
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else{
						
					}
		break;
 716:	92 c0       	rjmp	.+292    	; 0x83c <TIMER1_FAST_PWM_init+0x204>
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);
					}else if(u8_OCR_action == TIMER1_FAST_PWM_TOGGLE_PIN_OCR){
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else if(u8_OCR_action == TIMER1_FAST_PWM_CLAER_PIN_OCR){
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	99 f4       	brne	.+38     	; 0x744 <TIMER1_FAST_PWM_init+0x10c>
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
 71e:	8f e4       	ldi	r24, 0x4F	; 79
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	2f e4       	ldi	r18, 0x4F	; 79
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	20 81       	ld	r18, Z
 72a:	20 68       	ori	r18, 0x80	; 128
 72c:	fc 01       	movw	r30, r24
 72e:	20 83       	st	Z, r18
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
 730:	8f e4       	ldi	r24, 0x4F	; 79
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	2f e4       	ldi	r18, 0x4F	; 79
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	f9 01       	movw	r30, r18
 73a:	20 81       	ld	r18, Z
 73c:	2f 7b       	andi	r18, 0xBF	; 191
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else{
						
					}
		break;
 742:	7c c0       	rjmp	.+248    	; 0x83c <TIMER1_FAST_PWM_init+0x204>
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else if(u8_OCR_action == TIMER1_FAST_PWM_CLAER_PIN_OCR){
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else if(u8_OCR_action == TIMER1_FAST_PWM_SET_PIN_OCR){
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	09 f0       	breq	.+2      	; 0x74c <TIMER1_FAST_PWM_init+0x114>
 74a:	78 c0       	rjmp	.+240    	; 0x83c <TIMER1_FAST_PWM_init+0x204>
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
 74c:	8f e4       	ldi	r24, 0x4F	; 79
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	2f e4       	ldi	r18, 0x4F	; 79
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	f9 01       	movw	r30, r18
 756:	20 81       	ld	r18, Z
 758:	20 68       	ori	r18, 0x80	; 128
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
 75e:	8f e4       	ldi	r24, 0x4F	; 79
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	2f e4       	ldi	r18, 0x4F	; 79
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	f9 01       	movw	r30, r18
 768:	20 81       	ld	r18, Z
 76a:	20 64       	ori	r18, 0x40	; 64
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
					}else{
						
					}
		break;
 770:	65 c0       	rjmp	.+202    	; 0x83c <TIMER1_FAST_PWM_init+0x204>
		case 'B' :
					DIO_SetPinDirection(TIMER1_PWM_CHB_PIN_NUM,OUTPUT);	/* Channel B pin output pin */
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	8c e1       	ldi	r24, 0x1C	; 28
 776:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_SetPinDirection>
					Set_Bit(TIMER1_INTERRUPT_MASK_REG,TIMER1_OCR_CHB_INTERRUPT_ENABLE_BIT); /* Enable OCR CHB interrupt */
 77a:	89 e5       	ldi	r24, 0x59	; 89
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	29 e5       	ldi	r18, 0x59	; 89
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	f9 01       	movw	r30, r18
 784:	20 81       	ld	r18, Z
 786:	28 60       	ori	r18, 0x08	; 8
 788:	fc 01       	movw	r30, r24
 78a:	20 83       	st	Z, r18
					/* Determine the Action of OCR pin in OCR match */
					if(u8_OCR_action == TIMER1_FAST_PWM_NORMAL_PIN){
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	88 23       	and	r24, r24
 790:	99 f4       	brne	.+38     	; 0x7b8 <TIMER1_FAST_PWM_init+0x180>
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
 792:	8f e4       	ldi	r24, 0x4F	; 79
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	2f e4       	ldi	r18, 0x4F	; 79
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	f9 01       	movw	r30, r18
 79c:	20 81       	ld	r18, Z
 79e:	2f 7d       	andi	r18, 0xDF	; 223
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 83       	st	Z, r18
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
 7a4:	8f e4       	ldi	r24, 0x4F	; 79
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	2f e4       	ldi	r18, 0x4F	; 79
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	f9 01       	movw	r30, r18
 7ae:	20 81       	ld	r18, Z
 7b0:	2f 7e       	andi	r18, 0xEF	; 239
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else{
						
					}						
		break;
 7b6:	44 c0       	rjmp	.+136    	; 0x840 <TIMER1_FAST_PWM_init+0x208>
					Set_Bit(TIMER1_INTERRUPT_MASK_REG,TIMER1_OCR_CHB_INTERRUPT_ENABLE_BIT); /* Enable OCR CHB interrupt */
					/* Determine the Action of OCR pin in OCR match */
					if(u8_OCR_action == TIMER1_FAST_PWM_NORMAL_PIN){
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else if(u8_OCR_action == TIMER1_FAST_PWM_TOGGLE_PIN_OCR){
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	99 f4       	brne	.+38     	; 0x7e4 <TIMER1_FAST_PWM_init+0x1ac>
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
 7be:	8f e4       	ldi	r24, 0x4F	; 79
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	2f e4       	ldi	r18, 0x4F	; 79
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f9 01       	movw	r30, r18
 7c8:	20 81       	ld	r18, Z
 7ca:	2f 7d       	andi	r18, 0xDF	; 223
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
 7d0:	8f e4       	ldi	r24, 0x4F	; 79
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	2f e4       	ldi	r18, 0x4F	; 79
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	f9 01       	movw	r30, r18
 7da:	20 81       	ld	r18, Z
 7dc:	20 61       	ori	r18, 0x10	; 16
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else{
						
					}						
		break;
 7e2:	2e c0       	rjmp	.+92     	; 0x840 <TIMER1_FAST_PWM_init+0x208>
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else if(u8_OCR_action == TIMER1_FAST_PWM_TOGGLE_PIN_OCR){
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else if(u8_OCR_action == TIMER1_FAST_PWM_CLAER_PIN_OCR){
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	82 30       	cpi	r24, 0x02	; 2
 7e8:	99 f4       	brne	.+38     	; 0x810 <TIMER1_FAST_PWM_init+0x1d8>
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
 7ea:	8f e4       	ldi	r24, 0x4F	; 79
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	2f e4       	ldi	r18, 0x4F	; 79
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 81       	ld	r18, Z
 7f6:	20 62       	ori	r18, 0x20	; 32
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
 7fc:	8f e4       	ldi	r24, 0x4F	; 79
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	2f e4       	ldi	r18, 0x4F	; 79
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	f9 01       	movw	r30, r18
 806:	20 81       	ld	r18, Z
 808:	2f 7e       	andi	r18, 0xEF	; 239
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else{
						
					}						
		break;
 80e:	18 c0       	rjmp	.+48     	; 0x840 <TIMER1_FAST_PWM_init+0x208>
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else if(u8_OCR_action == TIMER1_FAST_PWM_CLAER_PIN_OCR){
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Clear_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else if(u8_OCR_action == TIMER1_FAST_PWM_SET_PIN_OCR){
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	83 30       	cpi	r24, 0x03	; 3
 814:	a9 f4       	brne	.+42     	; 0x840 <TIMER1_FAST_PWM_init+0x208>
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
 816:	8f e4       	ldi	r24, 0x4F	; 79
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	2f e4       	ldi	r18, 0x4F	; 79
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	f9 01       	movw	r30, r18
 820:	20 81       	ld	r18, Z
 822:	20 62       	ori	r18, 0x20	; 32
 824:	fc 01       	movw	r30, r24
 826:	20 83       	st	Z, r18
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
 828:	8f e4       	ldi	r24, 0x4F	; 79
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	2f e4       	ldi	r18, 0x4F	; 79
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	f9 01       	movw	r30, r18
 832:	20 81       	ld	r18, Z
 834:	20 61       	ori	r18, 0x10	; 16
 836:	fc 01       	movw	r30, r24
 838:	20 83       	st	Z, r18
						}else{
						
					}						
		break;
 83a:	02 c0       	rjmp	.+4      	; 0x840 <TIMER1_FAST_PWM_init+0x208>
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT1);
						Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHA_BIT0);						
					}else{
						
					}
		break;
 83c:	00 00       	nop
 83e:	01 c0       	rjmp	.+2      	; 0x842 <TIMER1_FAST_PWM_init+0x20a>
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT1);
							Set_Bit(TIMER1_CONTROL_REG_1A,TIMER1_COMPARE_OUTPUT_ACTION_CHB_BIT0);
						}else{
						
					}						
		break;
 840:	00 00       	nop
		default:
		
		break ;
	}
}
 842:	00 00       	nop
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <TIMER1_FAST_PWM_OCR_VALUES>:

Function Return      : N/A

*******************************************************************************/

void TIMER1_FAST_PWM_OCR_VALUES(uint16 u16_TIMER1_ocr_vals){
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	00 d0       	rcall	.+0      	; 0x854 <TIMER1_FAST_PWM_OCR_VALUES+0x6>
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	9a 83       	std	Y+2, r25	; 0x02
 85a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the values in out put compare register to control the duty cycle */
	TIMER1_OCR_DATA_REG_HIGH = (uint8)(u16_TIMER1_ocr_vals >> SHIFT_EIGHT_BITS) ;
 85c:	8b e4       	ldi	r24, 0x4B	; 75
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	29 81       	ldd	r18, Y+1	; 0x01
 862:	3a 81       	ldd	r19, Y+2	; 0x02
 864:	23 2f       	mov	r18, r19
 866:	33 27       	eor	r19, r19
 868:	fc 01       	movw	r30, r24
 86a:	20 83       	st	Z, r18
	TIMER1_OCR_DATA_REG_LOW  = (uint8)u16_TIMER1_ocr_vals ;
 86c:	8a e4       	ldi	r24, 0x4A	; 74
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	29 81       	ldd	r18, Y+1	; 0x01
 872:	fc 01       	movw	r30, r24
 874:	20 83       	st	Z, r18
}
 876:	00 00       	nop
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <TIMER1_FAST_PWM_OCR_VALS_using_DC>:

Function Return      : N/A

*******************************************************************************/

void TIMER1_FAST_PWM_OCR_VALS_using_DC(uint8 u8_duty_cycle){
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	00 d0       	rcall	.+0      	; 0x888 <TIMER1_FAST_PWM_OCR_VALS_using_DC+0x6>
 888:	1f 92       	push	r1
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	8b 83       	std	Y+3, r24	; 0x03
	/* The value of output compare register is calculated by the equation 
	Duty cycle = percentage of ones (OCR VAL) / percentage of zeros 
			   = OCRVAL / TOP 
	*/
	
	u16_TIMER1_OCR_vals = (u8_duty_cycle * (TIMER1_TOP_VAL + 1));
 890:	8b 81       	ldd	r24, Y+3	; 0x03
 892:	88 2f       	mov	r24, r24
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	98 2f       	mov	r25, r24
 898:	88 27       	eor	r24, r24
 89a:	99 0f       	add	r25, r25
 89c:	99 0f       	add	r25, r25
 89e:	9a 83       	std	Y+2, r25	; 0x02
 8a0:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_FAST_PWM_OCR_VALUES(u16_TIMER1_OCR_vals);
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER1_FAST_PWM_OCR_VALUES>
}
 8aa:	00 00       	nop
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

000008b8 <TIMER1_PRE_COMPILE_CONFIGURATIONS>:

Function Parameters  : N/A
Function Return      : N/A
************************************************************************************************/

void TIMER1_PRE_COMPILE_CONFIGURATIONS(){
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
	#elif(TIMER1_PRESCALER == TIMER_PRESCLAER_8)
		Clear_Bit(TCCR1B,TIMER1_PRESCALER_BIT0);
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT1);
		Clear_Bit(TCCR1B,TIMER1_PRESCALER_BIT2);
	#elif(TIMER1_PRESCALER == TIMER_PRESCALER_64)
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT0);
 8c0:	8e e4       	ldi	r24, 0x4E	; 78
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	2e e4       	ldi	r18, 0x4E	; 78
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	f9 01       	movw	r30, r18
 8ca:	20 81       	ld	r18, Z
 8cc:	21 60       	ori	r18, 0x01	; 1
 8ce:	fc 01       	movw	r30, r24
 8d0:	20 83       	st	Z, r18
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT1);
 8d2:	8e e4       	ldi	r24, 0x4E	; 78
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	2e e4       	ldi	r18, 0x4E	; 78
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	f9 01       	movw	r30, r18
 8dc:	20 81       	ld	r18, Z
 8de:	22 60       	ori	r18, 0x02	; 2
 8e0:	fc 01       	movw	r30, r24
 8e2:	20 83       	st	Z, r18
		Clear_Bit(TCCR1B,TIMER1_PRESCALER_BIT2);
 8e4:	8e e4       	ldi	r24, 0x4E	; 78
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2e e4       	ldi	r18, 0x4E	; 78
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	f9 01       	movw	r30, r18
 8ee:	20 81       	ld	r18, Z
 8f0:	2b 7f       	andi	r18, 0xFB	; 251
 8f2:	fc 01       	movw	r30, r24
 8f4:	20 83       	st	Z, r18
	#elif(TIMER1_PRESCALER == TIMER_EXTERNAL_CLOCK_RISING_EDGE)
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT0);
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT1);
		Set_Bit(TCCR1B,TIMER1_PRESCALER_BIT2);
	#endif
 8f6:	00 00       	nop
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
