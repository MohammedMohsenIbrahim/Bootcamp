
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d74  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c09  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c6  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_10>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  8a:	0c 94 ed 02 	jmp	0x5da	; 0x5da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
/********************************************* External Functions *************************************/
extern void Traffic_light_delay_ISR(); 

/***************************************** Interrupt service rotuine *********************************/
/* TIMER0 OVF interrupt service routine */
ISR(TIMER0_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
		 
}
  a6:	00 00       	nop
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	0f 90       	pop	r0
  ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <Tasks_init>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void Tasks_init(){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinDirection(LED1_PIN_NUM,OUTPUT);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LED2_PIN_NUM,OUTPUT);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LED3_PIN_NUM,OUTPUT);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	 TIMER0_OCR_init(TICKS_FOR_1MS);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 9d 02 	call	0x53a	; 0x53a <TIMER0_OCR_init>
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Task_BLINK_LED1>:
Function Parameters  : N/A 

Function Return      : N/A

*******************************************************************************/
volatile void Task_BLINK_LED1(){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	if(Call_Back_Flag == TRUE){
  f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Call_Back_Flag>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	51 f4       	brne	.+20     	; 0x10c <Task_BLINK_LED1+0x24>
		Toggle_Bit(LED1_PORT,5);
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	28 e3       	ldi	r18, 0x38	; 56
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	30 81       	ld	r19, Z
 104:	20 e2       	ldi	r18, 0x20	; 32
 106:	23 27       	eor	r18, r19
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	}
}
 10c:	00 00       	nop
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <Task_BLINK_LED2>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
volatile void volatile Task_BLINK_LED2(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	if(Call_Back_Flag == TRUE){	
 11c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Call_Back_Flag>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	51 f4       	brne	.+20     	; 0x138 <Task_BLINK_LED2+0x24>
		Toggle_Bit(LED2_PORT,6);
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e3       	ldi	r18, 0x38	; 56
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	30 81       	ld	r19, Z
 130:	20 e4       	ldi	r18, 0x40	; 64
 132:	23 27       	eor	r18, r19
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	}
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Task_BLINK_LED3>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
volatile void Task_BLINK_LED3(){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
  if(Call_Back_Flag == TRUE){	
 148:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Call_Back_Flag>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <Task_BLINK_LED3+0x24>
	Toggle_Bit(LED3_PORT,7);
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	28 e3       	ldi	r18, 0x38	; 56
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	30 81       	ld	r19, Z
 15c:	20 e8       	ldi	r18, 0x80	; 128
 15e:	23 27       	eor	r18, r19
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
  }
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <Schedular_Add_Task>:
Function Parameters  : void (*Added_Fun_Name)(void) : fun wanted to be added into the array 

Function Return      : N/A

*******************************************************************************/
uint8 Schedular_Add_Task(void (*Added_Fun_Name)(void)){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <Schedular_Add_Task+0x6>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	89 83       	std	Y+1, r24	; 0x01
	static uint16 Local_u16_ready_tasks_array_counter = 0 ;
	if(NULL == Ready_Tasks_PTR_Array[Local_u16_ready_tasks_array_counter] && TTC_MAX_TASKS_NUM > Local_u16_ready_tasks_array_counter){
 17a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Local_u16_ready_tasks_array_counter.1767>
 17e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Local_u16_ready_tasks_array_counter.1767+0x1>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	8e 59       	subi	r24, 0x9E	; 158
 188:	9f 4f       	sbci	r25, 0xFF	; 255
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	89 2b       	or	r24, r25
 192:	f1 f4       	brne	.+60     	; 0x1d0 <Schedular_Add_Task+0x64>
 194:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Local_u16_ready_tasks_array_counter.1767>
 198:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Local_u16_ready_tasks_array_counter.1767+0x1>
 19c:	02 97       	sbiw	r24, 0x02	; 2
 19e:	c0 f4       	brcc	.+48     	; 0x1d0 <Schedular_Add_Task+0x64>
		Ready_Tasks_PTR_Array[Local_u16_ready_tasks_array_counter] = Added_Fun_Name ;
 1a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Local_u16_ready_tasks_array_counter.1767>
 1a4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Local_u16_ready_tasks_array_counter.1767+0x1>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	8e 59       	subi	r24, 0x9E	; 158
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	fc 01       	movw	r30, r24
 1b6:	31 83       	std	Z+1, r19	; 0x01
 1b8:	20 83       	st	Z, r18
		Local_u16_ready_tasks_array_counter++ ;
 1ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Local_u16_ready_tasks_array_counter.1767>
 1be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Local_u16_ready_tasks_array_counter.1767+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Local_u16_ready_tasks_array_counter.1767+0x1>
 1c8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Local_u16_ready_tasks_array_counter.1767>

		return TRUE ;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <Schedular_Add_Task+0x66>
	}else{
		return FALSE ;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <Schedular_run_tasks>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void Schedular_run_tasks(){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	static uint16 Local_u16_ready_tasks_array_index = 0 ;
	if(NULL != Ready_Tasks_PTR_Array[Local_u16_ready_tasks_array_index]){
 1e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Local_u16_ready_tasks_array_index.1770>
 1e8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Local_u16_ready_tasks_array_index.1770+0x1>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	8e 59       	subi	r24, 0x9E	; 158
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	89 2b       	or	r24, r25
 1fc:	b1 f0       	breq	.+44     	; 0x22a <Schedular_run_tasks+0x4e>
		(*Ready_Tasks_PTR_Array[Local_u16_ready_tasks_array_index])();
 1fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Local_u16_ready_tasks_array_index.1770>
 202:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Local_u16_ready_tasks_array_index.1770+0x1>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	8e 59       	subi	r24, 0x9E	; 158
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	fc 01       	movw	r30, r24
 216:	09 95       	icall
		Local_u16_ready_tasks_array_index++ ;
 218:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Local_u16_ready_tasks_array_index.1770>
 21c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Local_u16_ready_tasks_array_index.1770+0x1>
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Local_u16_ready_tasks_array_index.1770+0x1>
 226:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Local_u16_ready_tasks_array_index.1770>
	}
}
 22a:	00 00       	nop
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <DIO_SetPinDirection>:

Functions Parameters : PinDirection	 (Input or Output) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_SetPinDirection+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinDirection){			/* check the direction of the pin wanted */
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	21 f0       	breq	.+8      	; 0x252 <DIO_SetPinDirection+0x20>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	09 f4       	brne	.+2      	; 0x250 <DIO_SetPinDirection+0x1e>
 24e:	7a c0       	rjmp	.+244    	; 0x344 <DIO_SetPinDirection+0x112>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
		default:
		break;
 250:	ef c0       	rjmp	.+478    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	b0 f4       	brcc	.+44     	; 0x284 <DIO_SetPinDirection+0x52>
				Clear_Bit(DDR_A,PinNum);
 258:	8a e3       	ldi	r24, 0x3A	; 58
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2a e3       	ldi	r18, 0x3A	; 58
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	62 2f       	mov	r22, r18
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	42 2f       	mov	r20, r18
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinDirection+0x44>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	4a 95       	dec	r20
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinDirection+0x40>
 27a:	20 95       	com	r18
 27c:	26 23       	and	r18, r22
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 282:	d3 c0       	rjmp	.+422    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
				Clear_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	88 30       	cpi	r24, 0x08	; 8
 288:	e0 f0       	brcs	.+56     	; 0x2c2 <DIO_SetPinDirection+0x90>
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	80 31       	cpi	r24, 0x10	; 16
 28e:	c8 f4       	brcc	.+50     	; 0x2c2 <DIO_SetPinDirection+0x90>
				Clear_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 290:	87 e3       	ldi	r24, 0x37	; 55
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	27 e3       	ldi	r18, 0x37	; 55
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
 29c:	62 2f       	mov	r22, r18
 29e:	29 81       	ldd	r18, Y+1	; 0x01
 2a0:	22 2f       	mov	r18, r18
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	a9 01       	movw	r20, r18
 2a6:	48 50       	subi	r20, 0x08	; 8
 2a8:	51 09       	sbc	r21, r1
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x82>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x7e>
 2b8:	20 95       	com	r18
 2ba:	26 23       	and	r18, r22
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	40 c0       	rjmp	.+128    	; 0x342 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	80 31       	cpi	r24, 0x10	; 16
 2c6:	e0 f0       	brcs	.+56     	; 0x300 <DIO_SetPinDirection+0xce>
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	88 31       	cpi	r24, 0x18	; 24
 2cc:	c8 f4       	brcc	.+50     	; 0x300 <DIO_SetPinDirection+0xce>
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 2ce:	84 e3       	ldi	r24, 0x34	; 52
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	24 e3       	ldi	r18, 0x34	; 52
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	62 2f       	mov	r22, r18
 2dc:	29 81       	ldd	r18, Y+1	; 0x01
 2de:	22 2f       	mov	r18, r18
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	a9 01       	movw	r20, r18
 2e4:	40 51       	subi	r20, 0x10	; 16
 2e6:	51 09       	sbc	r21, r1
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_SetPinDirection+0xc0>
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	4a 95       	dec	r20
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_SetPinDirection+0xbc>
 2f6:	20 95       	com	r18
 2f8:	26 23       	and	r18, r22
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	21 c0       	rjmp	.+66     	; 0x342 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 31       	cpi	r24, 0x18	; 24
 304:	08 f4       	brcc	.+2      	; 0x308 <DIO_SetPinDirection+0xd6>
 306:	91 c0       	rjmp	.+290    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	80 32       	cpi	r24, 0x20	; 32
 30c:	08 f0       	brcs	.+2      	; 0x310 <DIO_SetPinDirection+0xde>
 30e:	8d c0       	rjmp	.+282    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 310:	81 e3       	ldi	r24, 0x31	; 49
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	21 e3       	ldi	r18, 0x31	; 49
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	20 81       	ld	r18, Z
 31c:	62 2f       	mov	r22, r18
 31e:	29 81       	ldd	r18, Y+1	; 0x01
 320:	22 2f       	mov	r18, r18
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	a9 01       	movw	r20, r18
 326:	48 51       	subi	r20, 0x18	; 24
 328:	51 09       	sbc	r21, r1
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_SetPinDirection+0x102>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	4a 95       	dec	r20
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_SetPinDirection+0xfe>
 338:	20 95       	com	r18
 33a:	26 23       	and	r18, r22
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
			}
		break;
 340:	74 c0       	rjmp	.+232    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 342:	73 c0       	rjmp	.+230    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	a8 f4       	brcc	.+42     	; 0x374 <DIO_SetPinDirection+0x142>
				Set_Bit(DDR_A,PinNum);
 34a:	8a e3       	ldi	r24, 0x3A	; 58
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	2a e3       	ldi	r18, 0x3A	; 58
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	62 2f       	mov	r22, r18
 358:	29 81       	ldd	r18, Y+1	; 0x01
 35a:	42 2f       	mov	r20, r18
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinDirection+0x136>
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	4a 95       	dec	r20
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinDirection+0x132>
 36c:	26 2b       	or	r18, r22
 36e:	fc 01       	movw	r30, r24
 370:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 372:	5d c0       	rjmp	.+186    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		break;
		case OUTPUT :
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
				Set_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	d8 f0       	brcs	.+54     	; 0x3b0 <DIO_SetPinDirection+0x17e>
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	80 31       	cpi	r24, 0x10	; 16
 37e:	c0 f4       	brcc	.+48     	; 0x3b0 <DIO_SetPinDirection+0x17e>
				Set_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
 380:	87 e3       	ldi	r24, 0x37	; 55
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	27 e3       	ldi	r18, 0x37	; 55
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	62 2f       	mov	r22, r18
 38e:	29 81       	ldd	r18, Y+1	; 0x01
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	a9 01       	movw	r20, r18
 396:	48 50       	subi	r20, 0x08	; 8
 398:	51 09       	sbc	r21, r1
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0x172>
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	4a 95       	dec	r20
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0x16e>
 3a8:	26 2b       	or	r18, r22
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
 3ae:	3c c0       	rjmp	.+120    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	80 31       	cpi	r24, 0x10	; 16
 3b4:	d8 f0       	brcs	.+54     	; 0x3ec <DIO_SetPinDirection+0x1ba>
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	88 31       	cpi	r24, 0x18	; 24
 3ba:	c0 f4       	brcc	.+48     	; 0x3ec <DIO_SetPinDirection+0x1ba>
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
 3bc:	84 e3       	ldi	r24, 0x34	; 52
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	24 e3       	ldi	r18, 0x34	; 52
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	62 2f       	mov	r22, r18
 3ca:	29 81       	ldd	r18, Y+1	; 0x01
 3cc:	22 2f       	mov	r18, r18
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	a9 01       	movw	r20, r18
 3d2:	40 51       	subi	r20, 0x10	; 16
 3d4:	51 09       	sbc	r21, r1
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinDirection+0x1ae>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	4a 95       	dec	r20
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinDirection+0x1aa>
 3e4:	26 2b       	or	r18, r22
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
 3ea:	1e c0       	rjmp	.+60     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	88 31       	cpi	r24, 0x18	; 24
 3f0:	f0 f0       	brcs	.+60     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	80 32       	cpi	r24, 0x20	; 32
 3f6:	d8 f4       	brcc	.+54     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
 3f8:	81 e3       	ldi	r24, 0x31	; 49
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	21 e3       	ldi	r18, 0x31	; 49
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	f9 01       	movw	r30, r18
 402:	20 81       	ld	r18, Z
 404:	62 2f       	mov	r22, r18
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	22 2f       	mov	r18, r18
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	a9 01       	movw	r20, r18
 40e:	48 51       	subi	r20, 0x18	; 24
 410:	51 09       	sbc	r21, r1
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	4a 95       	dec	r20
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	26 2b       	or	r18, r22
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
			}
		break;
 426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 42a:	00 00       	nop
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
				Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
				Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
			}
		break;
 42e:	00 00       	nop
		default:
		break;
	}
}
 430:	00 00       	nop
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <main>:
#include "HAL/headers/DC_Motor.h"
#include "APP/TTC Schedular/TTC_Headers/TTC_Schedular.h"
#include "APP/TTC Schedular/TTC_Headers/Tasks.h"

int main(void)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
	sei();
 444:	78 94       	sei
	Tasks_init();
 446:	0e 94 5c 00 	call	0xb8	; 0xb8 <Tasks_init>
	Schedular_Add_Task(Task_BLINK_LED1);
 44a:	84 e7       	ldi	r24, 0x74	; 116
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_Add_Task>
	Schedular_Add_Task(Task_BLINK_LED2);
 452:	8a e8       	ldi	r24, 0x8A	; 138
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_Add_Task>
	Schedular_Add_Task(Task_BLINK_LED3);
 45a:	80 ea       	ldi	r24, 0xA0	; 160
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 b6 00 	call	0x16c	; 0x16c <Schedular_Add_Task>
    while(1) 
    {
		Schedular_run_tasks();
 462:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Schedular_run_tasks>
			
	}
 466:	fd cf       	rjmp	.-6      	; 0x462 <main+0x26>

00000468 <__vector_10>:
	Clear_Bit(TCCR0,5);

	
	TCNT0 = NUM_ZERO ;           
	
}
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Call_Back_Notification>
 498:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Call_Back_Notification+0x1>
 49c:	fc 01       	movw	r30, r24
 49e:	09 95       	icall
 4a0:	00 00       	nop
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <Set_Call_Back_Flag>:
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Call_Back_Flag>
 4d8:	00 00       	nop
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <Set_Call_Back>:
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	0e 94 65 02 	call	0x4ca	; 0x4ca <Set_Call_Back_Flag>
 4ec:	00 00       	nop
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <TIMER0_PRE_COMPILE_CONFIGURATIONS>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	83 e5       	ldi	r24, 0x53	; 83
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	23 e5       	ldi	r18, 0x53	; 83
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	20 81       	ld	r18, Z
 508:	21 60       	ori	r18, 0x01	; 1
 50a:	fc 01       	movw	r30, r24
 50c:	20 83       	st	Z, r18
 50e:	83 e5       	ldi	r24, 0x53	; 83
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	23 e5       	ldi	r18, 0x53	; 83
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	22 60       	ori	r18, 0x02	; 2
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
 520:	83 e5       	ldi	r24, 0x53	; 83
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	23 e5       	ldi	r18, 0x53	; 83
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	20 81       	ld	r18, Z
 52c:	2b 7f       	andi	r18, 0xFB	; 251
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
 532:	00 00       	nop
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <TIMER0_OCR_init>:

Function Parameters  : no_of_ticks : number of ticks before clearing the output compare pin 

Function Return      : N/A
************************************************************************************************/
void TIMER0_OCR_init(uint8 no_of_ticks){
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	1f 92       	push	r1
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_PRE_COMPILE_CONFIGURATIONS();
 546:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TIMER0_PRE_COMPILE_CONFIGURATIONS>
		DIO_SetPinDirection(TIMER0_OCR_PIN_NUM,OUTPUT); /* make the compare mode pin as output pin */
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	8b e0       	ldi	r24, 0x0B	; 11
 54e:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	
		Set_Bit(TCCR0,7);   /* NON PWM MODE */
 552:	83 e5       	ldi	r24, 0x53	; 83
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	23 e5       	ldi	r18, 0x53	; 83
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	20 68       	ori	r18, 0x80	; 128
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
		Clear_Bit(TCCR0,6); /* OCR Mode     */
 564:	83 e5       	ldi	r24, 0x53	; 83
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	23 e5       	ldi	r18, 0x53	; 83
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	2f 7b       	andi	r18, 0xBF	; 191
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
		Set_Bit(TCCR0,3);
 576:	83 e5       	ldi	r24, 0x53	; 83
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	23 e5       	ldi	r18, 0x53	; 83
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	28 60       	ori	r18, 0x08	; 8
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
		Clear_Bit(TCCR0,4);	/* Clear output compare pin in compare match */
 588:	83 e5       	ldi	r24, 0x53	; 83
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	23 e5       	ldi	r18, 0x53	; 83
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	2f 7e       	andi	r18, 0xEF	; 239
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
 		Set_Bit(TCCR0,5);
 59a:	83 e5       	ldi	r24, 0x53	; 83
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	23 e5       	ldi	r18, 0x53	; 83
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	20 62       	ori	r18, 0x20	; 32
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
	 
	 #ifdef TIMER0_OCR_INTERRUPTS
		Set_Bit(TIMSK,1);
 5ac:	89 e5       	ldi	r24, 0x59	; 89
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	29 e5       	ldi	r18, 0x59	; 89
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	22 60       	ori	r18, 0x02	; 2
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
	 
	 #ifdef TIMER1_OVF_INTERRUPTS
		Set_Bit(TIMSK,0);
	 #endif
	
	TCNT0 = NUM_ZERO ;
 5be:	82 e5       	ldi	r24, 0x52	; 82
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	fc 01       	movw	r30, r24
 5c4:	10 82       	st	Z, r1
	OCR0  = no_of_ticks ;
 5c6:	8c e5       	ldi	r24, 0x5C	; 92
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	29 81       	ldd	r18, Y+1	; 0x01
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 83       	st	Z, r18
}
 5d0:	00 00       	nop
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
